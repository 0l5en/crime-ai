
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/me": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get information about the current user */
    get: operations["getMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** create a new registration of a user of type vacation rental */
    post: operations["createRegistration"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the latest crime cases */
    get: operations["listCrimeCasesAll"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase-basic": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get a list of basic crime cases */
    get: operations["listCrimeCasesBasic"];
    put?: never;
    /** start a task to create a new basic crime case */
    post: operations["createCrimeCaseBasic"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase-vacation-rental": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get a list of vacation rental crime cases */
    get: operations["listCrimeCasesVacationRental"];
    put?: never;
    /** start a task to create a new vacation rental crime case */
    post: operations["createCrimeCaseVacationRental"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get crime case details by id */
    get: operations["getCrimeCase"];
    put?: never;
    post?: never;
    /** delete a crime case by id */
    delete: operations["deleteCrimeCase"];
    options?: never;
    head?: never;
    /** update crime case */
    patch: operations["updateCrimeCase"];
    trace?: never;
  };
  "/crimecase/{id}/crimescene": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the crime scene of a crime case */
    get: operations["getCrimeScene"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}/evidence": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the evidences of a crime case */
    get: operations["listEvidences"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}/motive": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the motives of a crime case */
    get: operations["listMotives"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}/person": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the persons of a crime case */
    get: operations["listPersons"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}/solution-attempt": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of solution attempts. */
    get: operations["listSolutionAttempts"];
    put?: never;
    /** create a new attempt at a solution */
    post: operations["createSolutionAttempt"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase/{id}/subscription": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get the subscription of a crime case */
    get: operations["getSubscription"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase-vacation-rental/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** get payment link for vacation rental form data */
    post: operations["createPaymentLinkVacationRental"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interrogation": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of interrogations. */
    get: operations["listInterrogations"];
    put?: never;
    /** create a new interrogation answer for a given question */
    post: operations["createInterrogationAnswer"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/interrogation/{id}/question-and-answer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** get questions and answers about an interrogation */
    get: operations["getQuestionAndAnswers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/prompt-template": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new prompt template. */
    post: operations["createPromptTemplate"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/prompt-template-history": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the history of a prompt template. */
    get: operations["listPromptTemplateVersions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/prompt-template-identifier": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of prompt template identifiers. */
    get: operations["listPromptTemplateIdentifiers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/prompt-template/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a prompt template by id. */
    get: operations["getPromptTemplate"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/prompt-template/{id}/template-context": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the template context of a prompt template. */
    get: operations["getTemplateContext"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/evidence-report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of evidence reports. */
    get: operations["listEvidenceReports"];
    put?: never;
    /** Create a new report for an evidence. */
    post: operations["createEvidenceReport"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/autopsy-report": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of autopsy reports. */
    get: operations["listAutopsyReports"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/autopsy-report-request": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** list autopsy report requests that belong to the currently logged-in user. */
    get: operations["listAutopsyReportRequests"];
    put?: never;
    /** Create a new request for autopsy report of a victim. */
    post: operations["createAutopsyReportRequest"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/task/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a task info object by id. */
    get: operations["getTaskInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/notification": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of notifications. */
    get: operations["listNotifications"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update a notification. */
    patch: operations["updateNotification"];
    trace?: never;
  };
  "/crimecase-generation-attempt-all": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of all CrimeCaseGenerationAttempts. */
    get: operations["listAllCaseGenerationAttempts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/crimecase-generation-attempt-my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of my CrimeCaseGenerationAttempts. */
    get: operations["listMyCaseGenerationAttempts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    UserInfoDto: {
      id: string;
      username: string;
      email: string;
      roles: string[];
      /** Format: int64 */
      exp: number;
    };
    CreateRegistrationDto: {
      userType: "VACATION_RENTAL" | "STANDARD";
      userName: string;
      email: string;
      password: string;
    };
    CrimeCaseDto: {
      id: string;
      title: string;
      description: string;
      summary: string;
      language: string;
      textToImage: string;
      imageUrl?: string;
      status: "UNPUBLISHED" | "PUBLISHED" | "PREMIUM";
    };
    ResultSetCrimeCase: {
      items?: components["schemas"]["CrimeCaseDto"][];
    };
    CrimeSceneDto: {
      /** Format: int64 */
      id: number;
      title: string;
      description: string;
      textToImage: string;
      imageUrl: string;
    };
    EvidenceDto: {
      /** Format: int64 */
      id: number;
      title: string;
      description: string;
      location: string;
      analysisResult: string;
      evidenceType: "FORENSIC" | "BALLISTIC" | "DIGITAL" | "DOCUMENT" | "TRACE" | "OTHER";
      textToImage: string;
      documentContent?: string;
      imageUrl: string;
    };
    ResultSetEvidence: {
      items?: components["schemas"]["EvidenceDto"][];
    };
    EvidenceReportDto: {
      /** Format: int64 */
      id: number;
      analysis: string;
      methods: string;
      conclusion: string;
      /** Format: int64 */
      personId: number;
    };
    ResultSetEvidenceReport: {
      items?: components["schemas"]["EvidenceReportDto"][];
    };
    CreateEvidenceReportDto: {
      /** Format: int64 */
      evidenceId: number;
      /** Format: int64 */
      personId: number;
    };
    MotiveDto: {
      /** Format: int64 */
      id: number;
      title: string;
      description: string;
    };
    ResultSetMotive: {
      items?: components["schemas"]["MotiveDto"][];
    };
    SolutionAttemptDto: {
      /** Format: int64 */
      id: number;
      userId: string;
      success: boolean;
      createdAt: string;
    };
    ResultSetSolutionAttempt: {
      items?: components["schemas"]["SolutionAttemptDto"][];
    };
    CreateSolutionAttemptDto: {
      solution: components["schemas"]["SolutionDto"];
      userId: string;
    };
    SolutionDto: {
      evidenceIds: number[];
      motiveIds: number[];
      personIds: number[];
    };
    SubscriptionDto: {
      testPeriodEnd?: string;
      subscriptionPeriodEnd?: string;
      canceled?: boolean;
    };
    AlibiDto: {
      /** Format: int64 */
      id: number;
      content: string;
    };
    PersonDto: {
      /** Format: int64 */
      id: number;
      name: string;
      roles: ("VICTIM" | "WITNESS" | "SUSPECT" | "DIGITAL_EXPERT" | "FORENSIC_EXPERT" | "BALLISTIC_EXPERT" | "DOCUMENT_EXPERT" | "TRACE_EXPERT" | "FORENSIC_PATHOLOGIST" | "CRIMINAL_ASSISTANT" | "PERPETRATOR")[];
      /** Format: int32 */
      age: number;
      profession: string;
      gender: string;
      personality: string;
      maritalStatus: string;
      financialSituation: string;
      previousConvictions: string[];
      relationshipToCase: string;
      lifeStatus: "DEAD" | "ALIVE";
      alibi?: components["schemas"]["AlibiDto"];
      textToImage: string;
      imageUrl?: string;
    };
    ResultSetPerson: {
      items?: components["schemas"]["PersonDto"][];
    };
    AutopsyReportDto: {
      title: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      reportAuthorId: number;
      externalExamination: string;
      internalExamination: string;
      causeOfDeath: string;
      conclusionsAndAssessment: string;
      timeOfDeathFrom: string;
      timeOfDeathTo: string;
      imageUrl: string
    };
    ResultSetAutopsyReport: {
      items?: components["schemas"]["AutopsyReportDto"][];
    };
    CreateAutopsyReportDto: {
      /** Format: int64 */
      reportAuthorId: number;
      /** Format: int64 */
      victimId: number;
    };
    InterrogationDto: {
      /** Format: int64 */
      id: number;
      userId: string;
      /** Format: int64 */
      personId: number;
    };
    ResultSetInterrogation: {
      items?: components["schemas"]["InterrogationDto"][];
    };
    CreateInterrogationAnswerDto: {
      question: string;
      userId: string;
      /** Format: int64 */
      personId: number;
      reference?: components["schemas"]["CreateReferenceDto"];
    };
    CreateReferenceDto: {
      /** Format: int64 */
      referenceId: number;
      referenceType: "EVIDENCE_REPORT";
    };
    QuestionAndAnswerDto: {
      question: string;
      answer: string;
      createdAt: string;
    };
    ResultSetQuestionAndAnswer: {
      items?: components["schemas"]["QuestionAndAnswerDto"][];
    };
    CreatePromptTemplateDto: {
      name: string;
      template: string;
    };
    PromptTemplateVersionDto: {
      /** Format: int64 */
      id: number;
      createdAt: string;
    };
    ResultSetPromptTemplateVersion: {
      items?: components["schemas"]["PromptTemplateVersionDto"][];
    };
    PromptTemplateIdentifierDto: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    ResultSetPromptTemplateIdentifier: {
      items?: components["schemas"]["PromptTemplateIdentifierDto"][];
    };
    PromptTemplateDto: {
      /** Format: int64 */
      id: number;
      name: string;
      template: string;
      createdAt: string;
    };
    TemplateContextDto: {
      variables: components["schemas"]["TemplateVariableDto"][];
    };
    TemplateVariableDto: {
      key: string;
      value: string;
    };
    AutopsyReportRequestDto: {
      /** Format: int64 */
      victimId: number;
      userId: string;
      createdAt: string;
    };
    ResultSetAutopsyReportRequest: {
      items?: components["schemas"]["AutopsyReportRequestDto"][];
    };
    CreateAutopsyReportRequestDto: {
      userId: string;
      /** Format: int64 */
      victimId: number;
    };
    TaskInfoDto: {
      id: string;
      taskStatus: "PENDING" | "COMPLETED";
      createdAt: string;
      completedAt?: string;
    };
    NotificationDto: {
      /** Format: int64 */
      id: number;
      notificationContextType: "AUTOPSY_REPORT";
      recipientId: string;
      nameOfSender: string;
      subject: string;
      read: boolean;
      createdAt: string;
    };
    ResultSetNotification: {
      items?: components["schemas"]["NotificationDto"][];
    };
    CrimeCaseGenerationAttemptDto: {
      /** Format: int64 */
      id: number;
      status: "CREATED" | "SUBSCRIBED" | "GENERATED";
      created: string;
    };
    ResultSetCrimeCaseGenerationAttemptDto: {
      items?: components["schemas"]["CrimeCaseGenerationAttemptDto"][];
    };
    CreateCaseGeneratorFormBasicDto: {
      caseGeneratorForm: "BASIC" | "VACATION_RENTAL";
      language: string;
      epoch: "TWENTIES" | "PRESENT" | "FUTURE";
      theme: "MURDER" | "ROBBERY" | "KIDNAPPING";
      additionalThemeDetails?: string;
      fullAddress: string;
      venueName: string;
      venueDescription: string;
      nearbySightseeingAttractions: components["schemas"]["CreateSightseeingAttractionDto"][];
      /** Format: int32 */
      approximateYearOfConstruction?: number;
      historicalFeaturesAndLegends?: string;
      historicalCulturalContext?: string;
    };
    CreateCaseGeneratorFormVacationRentalDto: {
      formBasic: components["schemas"]["CreateCaseGeneratorFormBasicDto"];
      /** Format: int32 */
      venueFloors: number;
      /** Format: int32 */
      venueBedrooms: number;
      /** Format: int32 */
      venueBathrooms: number;
      /** Format: int32 */
      maxGuests: number;
      roomLayoutDescription?: string;
    };
    CreateSightseeingAttractionDto: {
      attractionName: string;
      /** Format: int32 */
      distanceToVenue: number;
    };
    Violations: {
      violations?: components["schemas"]["Violation"][];
    };
    Violation: {
      message?: string;
      propertyPath?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export interface operations {
  getMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserInfoDto"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createRegistration: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new registration */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRegistrationDto"];
      };
    };
    responses: {
      /** @description successful operation */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if the username or email already exist */
      409: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listCrimeCasesAll: {
    parameters: {
      query?: {
        /** @description The maximum number of elements that should be returned. If this parameter is not specified, the default value of 10 will be used. */
        maxResults?: string;
        /** @description The type of crime case used during the generation process. */
        caseGeneratorFormType?: string;
        /** @description The id of a logged in user playing a crime case. */
        userId?: string;
        /** @description The status of a crime case. Multiple status values are combined using an OR operator. For example, status=a&status=b selects all elements that have either status A or status B. */
        status?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetCrimeCase"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listCrimeCasesBasic: {
    parameters: {
      query?: {
        /** @description The maximum number of elements that should be returned. If this parameter is not specified, the default value of 10 will be used. */
        maxResults?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetCrimeCase"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createCrimeCaseBasic: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new basic crime case */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCaseGeneratorFormBasicDto"];
      };
    };
    responses: {
      /** @description If the task was started successfully. The response will contain a Location Header to get the status of the task. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the request contains faulty input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Violations"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listCrimeCasesVacationRental: {
    parameters: {
      query?: {
        /** @description The maximum number of elements that should be returned. If this parameter is not specified, the default value of 10 will be used. */
        maxResults?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetCrimeCase"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createCrimeCaseVacationRental: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new vacation rental crime case */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCaseGeneratorFormVacationRentalDto"];
      };
    };
    responses: {
      /** @description If the task was started successfully. The response will contain a Location Header to get the status of the task. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the request contains faulty input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Violations"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getCrimeCase: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CrimeCaseDto"];
        };
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteCrimeCase: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateCrimeCase: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    /** @description the data required to update crime case */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CrimeCaseDto"];
      };
    };
    responses: {
      /** @description successful operation */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getCrimeScene: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CrimeSceneDto"];
        };
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listEvidences: {
    parameters: {
      query?: {
        /** @description If the value '0' is specified, only evidences not relevant to solve the case are returned (red herrings); if a value other than '0' is specified, only evidences relevant to solve the case are returned. */
        solutionEvidence?: string;
      };
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetEvidence"];
        };
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listMotives: {
    parameters: {
      query?: {
        /** @description person id */
        personId?: string;
      };
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetMotive"];
        };
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listPersons: {
    parameters: {
      query?: {
        /** @description one or more person roles - the operation returns all persons containing at least one of the given roles */
        personRole?: string;
      };
      header?: never;
      path: {
        /** @description crime case id - the operation returns all persons of the given crime case */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetPerson"];
        };
      };
      /** @description crime case not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if the request contains invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listSolutionAttempts: {
    parameters: {
      query?: {
        /** @description the id of a logged in user playing a crime case */
        userId?: string;
        /** @description If the value '0' is specified, only unsuccessful solution attempts are selected; if a value other than '0' is specified, only successful solution attempts are selected. */
        success?: string;
      };
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation responds with a list of solution attempts. If no query parameters are specified, an empty list is returned. A maximum of 10 items are returned. The items are sorted by creation date in descending order. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetSolutionAttempt"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createSolutionAttempt: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    /** @description the data required to create a new attempt at a solution */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSolutionAttemptDto"];
      };
    };
    responses: {
      /** @description successful operation responds with the generated id of the entity */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getSubscription: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description crime case id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SubscriptionDto"];
        };
      };
      /** @description the crime case has no subscription */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createPaymentLinkVacationRental: {
    parameters: {
      query?: {
        /** @description the id of the data submitted in the vacation rental form */
        id?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description If the payment link created successfully. The response will contain a Location Header that belongs to the checkout page for the vacation rental crime case. */
      202: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description If the request contains faulty input data. */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listEvidenceReports: {
    parameters: {
      query?: {
        /** @description The ID of the person who should create the report */
        personId?: string;
        /** @description The ID of the evidence from which the report is to be created */
        evidenceId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetEvidenceReport"];
        };
      };
      /** @description if there are missing or invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createEvidenceReport: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new report */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEvidenceReportDto"];
      };
    };
    responses: {
      /** @description successful operation without response body */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if an invalid request body was send */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listAutopsyReports: {
    parameters: {
      query?: {
        /** @description The ID of the report author */
        reportAuthorId?: string;
        /** @description The ID of the victim */
        victimId?: string;
        /** @description The ID of the notification */
        notificationId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetAutopsyReport"];
        };
      };
      /** @description if there are missing or invalid parameters */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listAutopsyReportRequests: {
    parameters: {
      query?: {
        /** @description Filter the results by the specified ID of a victim. */
        victimId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation returns a list of autopsy report requests */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetAutopsyReportRequest"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listInterrogations: {
    parameters: {
      query?: {
        /** @description the id of a logged in user playing a crime case */
        userId?: string;
        /** @description the id of a person from a criminal case with whom the interrogation was conducted */
        personId?: string;
        /** @description The id of a reference the interrogation is based on. The special value 'null' can be used to select interrogations not having a reference. */
        referenceId?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation responds with a list of interrogations. If whether personId nor userId are specified, an empty list is returned. A maximum of 10 items are returned. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetInterrogation"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createInterrogationAnswer: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new interrogation answer */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInterrogationAnswerDto"];
      };
    };
    responses: {
      /** @description successful operation responds with the generated id of the answer */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getQuestionAndAnswers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description interrogation id */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation responds with a list of questions and answers. The entries are sorted by creation date in descending order. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetQuestionAndAnswer"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createPromptTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new prompt template */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePromptTemplateDto"];
      };
    };
    responses: {
      /** @description successful operation without response body */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listPromptTemplateVersions: {
    parameters: {
      query: {
        /** @description the name of a template */
        name: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetPromptTemplateVersion"];
        };
      };
      /** @description if no name parameter is available */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listPromptTemplateIdentifiers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetPromptTemplateIdentifier"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getPromptTemplate: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the id of a prompt template */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PromptTemplateDto"];
        };
      };
      /** @description if the prompt template could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTemplateContext: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the id of a prompt template */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TemplateContextDto"];
        };
      };
      /** @description if the prompt template could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  createAutopsyReportRequest: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to create a new request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAutopsyReportRequestDto"];
      };
    };
    responses: {
      /** @description successful operation without response body */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if an invalid request body was send */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getTaskInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description the id of a task */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["TaskInfoDto"];
        };
      };
      /** @description if the task could not be found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listNotifications: {
    parameters: {
      query: {
        /** @description the id of a logged in user playing a crime case */
        userId: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetNotification"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  updateNotification: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description the data required to update a notification */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NotificationDto"];
      };
    };
    responses: {
      /** @description Successful operation. */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listAllCaseGenerationAttempts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetCrimeCaseGenerationAttemptDto"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  listMyCaseGenerationAttempts: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ResultSetCrimeCaseGenerationAttemptDto"];
        };
      };
      /** @description if any internal error occurs while processing the request */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
