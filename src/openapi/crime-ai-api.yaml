openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /crimecase:
    get:
      summary: get the 10 latest crime cases
      operationId: listCrimeCases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetCrimeCase"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: create a new crime case
      operationId: createCrimeCase
      requestBody:
        description: the data required to create a new crime case
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCrimeCaseDto"
        required: true
      responses:
        "201":
          description: successful operation
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}:
    get:
      summary: get crime case details by id
      operationId: getCrimeCase
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrimeCaseDto"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
    delete:
      summary: delete a crime case by id
      operationId: deleteCrimeCase
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: successful operation
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/crimescene:
    get:
      summary: get the crime scene of a crime case
      operationId: getCrimeScene
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrimeSceneDto"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/evidence:
    get:
      summary: get the evidences of a crime case
      operationId: getEvidences
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetEvidence"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/motive:
    get:
      summary: get the motives of a crime case
      operationId: getMotives
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetMotive"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/solution-attempt:
    get:
      summary: Get a list of solution attempts.
      operationId: listCrimeCaseSolutionAttempts
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      - name: user-id
        in: query
        description: the id of a logged in user playing a crime case
        schema:
          type: string
      - name: success
        in: query
        description: "If the value ‘0’ is specified, only unsuccessful solution attempts\
          \ are selected; if a value other than ‘0’ is specified, only successful\
          \ solution attempts are selected."
        schema:
          type: string
      responses:
        "200":
          description: "Successful operation responds with a list of solution attempts.\
            \ If no query parameters are specified, an empty list is returned. A maximum\
            \ of 10 items are returned. The items are sorted by creation date in descending\
            \ order."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetSolutionAttempt"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: create a new attempt at a solution
      operationId: createSolutionAttempt
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      requestBody:
        description: the data required to create a new attempt at a solution
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSolutionAttemptDto"
        required: true
      responses:
        "201":
          description: successful operation responds with the generated id of the
            entity
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/suspect:
    get:
      summary: get the suspects of a crime case
      operationId: getSuspects
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPerson"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/witness:
    get:
      summary: get the witnesses of a crime case
      operationId: getWitnesses
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPerson"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /interrogation:
    get:
      summary: Get a list of interrogations.
      operationId: listInterrogations
      parameters:
      - name: user-id
        in: query
        description: the id of a logged in user playing a crime case
        schema:
          type: string
      - name: person-id
        in: query
        description: the id of a person from a criminal case with whom the interrogation
          was conducted
        schema:
          type: string
      responses:
        "200":
          description: "Successful operation responds with a list of interrogations.\
            \ If no query parameters are specified, an empty list is returned. A maximum\
            \ of 10 items are returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetInterrogation"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: create a new interrogation answer for a given question
      operationId: createInterrogationAnswer
      requestBody:
        description: the data required to create a new interrogation answer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInterrogationAnswerDto"
        required: true
      responses:
        "201":
          description: successful operation responds with the generated id of the
            answer
        "500":
          description: if any internal error occurs while processing the request
  /interrogation/{id}/question-and-answer:
    get:
      summary: get questions and answers about an interrogation
      operationId: getQuestionAndAnswers
      parameters:
      - name: id
        in: path
        description: interrogation id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation responds with a list of questions and
            answers. The entries are sorted by creation date in descending order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetQuestionAndAnswer"
        "500":
          description: if any internal error occurs while processing the request
components:
  schemas:
    CrimeCaseDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        imageUrl:
          type: string
      required:
      - description
      - id
      - title
    ResultSetCrimeCase:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CrimeCaseDto"
    CreateCrimeCaseDto:
      type: object
      properties:
        amountEvidences:
          type: integer
          format: int32
        amountPersons:
          type: integer
          format: int32
        difficultyLevel:
          type: integer
          format: int32
        era:
          type: string
          minLength: 1
        language:
          type: string
          minLength: 1
        location:
          type: string
          minLength: 1
        maxAmountMotivesPerSuspect:
          type: integer
          format: int32
      required:
      - amountEvidences
      - amountPersons
      - difficultyLevel
      - era
      - language
      - location
      - maxAmountMotivesPerSuspect
    CrimeSceneDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
      required:
      - description
      - id
      - title
    EvidenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        location:
          type: string
        analysisResult:
          type: string
      required:
      - analysisResult
      - description
      - id
      - location
      - title
    ResultSetEvidence:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/EvidenceDto"
    MotiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
      required:
      - description
      - id
      - title
    ResultSetMotive:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MotiveDto"
    ResultSetSolutionAttempt:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SolutionAttemptDto"
    SolutionAttemptDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
          minLength: 1
        success:
          type: boolean
        createdAt:
          type: string
      required:
      - createdAt
      - id
      - userId
    CreateSolutionAttemptDto:
      type: object
      properties:
        solution:
          $ref: "#/components/schemas/SolutionDto"
        userId:
          type: string
          minLength: 1
      required:
      - solution
      - userId
    SolutionDto:
      type: object
      properties:
        evidenceIds:
          type: array
          items:
            type: integer
            format: int64
        motiveIds:
          type: array
          items:
            type: integer
            format: int64
        personIds:
          type: array
          items:
            type: integer
            format: int64
      required:
      - evidenceIds
      - motiveIds
      - personIds
    PersonDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
          enum:
          - VICTIM
          - WITNESS
          - SUSPECT
        age:
          type: integer
          format: int32
        profession:
          type: string
        gender:
          type: string
        personality:
          type: string
        maritalStatus:
          type: string
        financialSituation:
          type: string
        previousConvictions:
          type: array
          items:
            type: string
        relationshipToCase:
          type: string
      required:
      - age
      - financialSituation
      - gender
      - id
      - maritalStatus
      - name
      - personality
      - previousConvictions
      - profession
      - relationshipToCase
      - type
    ResultSetPerson:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PersonDto"
    InterrogationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        personId:
          type: integer
          format: int64
      required:
      - id
      - personId
      - userId
    ResultSetInterrogation:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/InterrogationDto"
    CreateInterrogationAnswerDto:
      type: object
      properties:
        question:
          type: string
        userId:
          type: string
        personId:
          type: integer
          format: int64
      required:
      - personId
      - question
      - userId
    QuestionAndAnswerDto:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
        createdAt:
          type: string
      required:
      - answer
      - createdAt
      - question
    ResultSetQuestionAndAnswer:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/QuestionAndAnswerDto"
