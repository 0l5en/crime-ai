openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://crime-ai.0l5en.de
  description: Generated server url
paths:
  /crimecase:
    get:
      summary: get the 10 latest crime cases
      operationId: listCrimeCases
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetCrimeCase"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: start a task to create a new crime case
      operationId: createCrimeCase
      requestBody:
        description: the data required to create a new crime case
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateContextDto"
        required: true
      responses:
        "202":
          description: If the task was started successfully. The response will contain
            a Location Header to get the status of the task.
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}:
    get:
      summary: get crime case details by id
      operationId: getCrimeCase
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrimeCaseDto"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
    delete:
      summary: delete a crime case by id
      operationId: deleteCrimeCase
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: successful operation
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/crimescene:
    get:
      summary: get the crime scene of a crime case
      operationId: getCrimeScene
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CrimeSceneDto"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/evidence:
    get:
      summary: get the evidences of a crime case
      operationId: listEvidences
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      - name: solutionEvidence
        in: query
        description: "If the value '0' is specified, only evidences not relevant to\
          \ solve the case are returned (red herrings); if a value other than '0'\
          \ is specified, only evidences relevant to solve the case are returned."
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetEvidence"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/motive:
    get:
      summary: get the motives of a crime case
      operationId: listMotives
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      - name: personId
        in: query
        description: person id
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetMotive"
        "404":
          description: crime case not found
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/person:
    get:
      summary: get the persons of a crime case
      operationId: listPersons
      parameters:
      - name: id
        in: path
        description: crime case id - the operation returns all persons of the given
          crime case
        required: true
        schema:
          type: string
      - name: personRole
        in: query
        description: one or more person roles - the operation returns all persons
          containing at least one of the given roles
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPerson"
        "404":
          description: crime case not found
        "400":
          description: if the request contains invalid parameters
        "500":
          description: if any internal error occurs while processing the request
  /crimecase/{id}/solution-attempt:
    get:
      summary: Get a list of solution attempts.
      operationId: listSolutionAttempts
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      - name: userId
        in: query
        description: the id of a logged in user playing a crime case
        schema:
          type: string
      - name: success
        in: query
        description: "If the value '0' is specified, only unsuccessful solution attempts\
          \ are selected; if a value other than '0' is specified, only successful\
          \ solution attempts are selected."
        schema:
          type: string
      responses:
        "200":
          description: "Successful operation responds with a list of solution attempts.\
            \ If no query parameters are specified, an empty list is returned. A maximum\
            \ of 10 items are returned. The items are sorted by creation date in descending\
            \ order."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetSolutionAttempt"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: create a new attempt at a solution
      operationId: createSolutionAttempt
      parameters:
      - name: id
        in: path
        description: crime case id
        required: true
        schema:
          type: string
      requestBody:
        description: the data required to create a new attempt at a solution
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSolutionAttemptDto"
        required: true
      responses:
        "201":
          description: successful operation responds with the generated id of the
            entity
        "500":
          description: if any internal error occurs while processing the request
  /interrogation:
    get:
      summary: Get a list of interrogations.
      operationId: listInterrogations
      parameters:
      - name: userId
        in: query
        description: the id of a logged in user playing a crime case
        schema:
          type: string
      - name: personId
        in: query
        description: the id of a person from a criminal case with whom the interrogation
          was conducted
        schema:
          type: string
      - name: referenceId
        in: query
        description: The id of a reference the interrogation is based on. The special
          value 'null' can be used to select interrogations not having a reference.
        schema:
          type: string
      responses:
        "200":
          description: "Successful operation responds with a list of interrogations.\
            \ If whether personId nor userId are specified, an empty list is returned.\
            \ A maximum of 10 items are returned."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetInterrogation"
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: create a new interrogation answer for a given question
      operationId: createInterrogationAnswer
      requestBody:
        description: the data required to create a new interrogation answer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInterrogationAnswerDto"
        required: true
      responses:
        "201":
          description: successful operation responds with the generated id of the
            answer
        "500":
          description: if any internal error occurs while processing the request
  /interrogation/{id}/question-and-answer:
    get:
      summary: get questions and answers about an interrogation
      operationId: getQuestionAndAnswers
      parameters:
      - name: id
        in: path
        description: interrogation id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation responds with a list of questions and
            answers. The entries are sorted by creation date in descending order.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetQuestionAndAnswer"
        "500":
          description: if any internal error occurs while processing the request
  /prompt-template:
    post:
      summary: Create a new prompt template.
      operationId: createPromptTemplate
      requestBody:
        description: the data required to create a new prompt template
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePromptTemplateDto"
        required: true
      responses:
        "201":
          description: successful operation without response body
        "500":
          description: if any internal error occurs while processing the request
  /prompt-template-history:
    get:
      summary: Get the history of a prompt template.
      operationId: listPromptTemplateVersions
      parameters:
      - name: name
        in: query
        description: the name of a template
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPromptTemplateVersion"
        "400":
          description: if no name parameter is available
        "500":
          description: if any internal error occurs while processing the request
  /prompt-template-identifier:
    get:
      summary: Get a list of prompt template identifiers.
      operationId: listPromptTemplateIdentifiers
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetPromptTemplateIdentifier"
        "500":
          description: if any internal error occurs while processing the request
  /prompt-template/{id}:
    get:
      summary: Get a prompt template by id.
      operationId: getPromptTemplate
      parameters:
      - name: id
        in: path
        description: the id of a prompt template
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PromptTemplateDto"
        "404":
          description: if the prompt template could not be found
        "500":
          description: if any internal error occurs while processing the request
  /prompt-template/{id}/template-context:
    get:
      summary: Get the template context of a prompt template.
      operationId: getTemplateContext
      parameters:
      - name: id
        in: path
        description: the id of a prompt template
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateContextDto"
        "404":
          description: if the prompt template could not be found
        "500":
          description: if any internal error occurs while processing the request
  /evidence-report:
    get:
      summary: Get a list of evidence reports.
      operationId: listEvidenceReports
      parameters:
      - name: personId
        in: query
        description: The ID of the person who should create the report
        schema:
          type: string
      - name: evidenceId
        in: query
        description: The ID of the evidence from which the report is to be created
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetEvidenceReport"
        "400":
          description: if there are missing or invalid parameters
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: "Create a new report for an evidence. If a report already exist for\
        \ the given identifier (userId, personId, evidenceId), this operation will\
        \ do nothing."
      operationId: createEvidenceReport
      requestBody:
        description: the data required to create a new report
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEvidenceReportDto"
        required: true
      responses:
        "201":
          description: successful operation without response body
        "400":
          description: if an invalid request body was send
        "500":
          description: if any internal error occurs while processing the request
  /autopsy-report:
    get:
      summary: Get a list of autopsy reports.
      operationId: listAutopsyReports
      parameters:
      - name: reportAuthorId
        in: query
        description: The ID of the report author
        schema:
          type: string
      - name: victimId
        in: query
        description: The ID of the victim
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResultSetAutopsyReport"
        "400":
          description: if there are missing or invalid parameters
        "500":
          description: if any internal error occurs while processing the request
    post:
      summary: "Create a new autopsy report for a victim. If a report already exist\
        \ for the given identifier (reportAuthor, victimId), this operation will do\
        \ nothing."
      operationId: createAutopsyReport
      requestBody:
        description: the data required to create a new report
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAutopsyReportDto"
        required: true
      responses:
        "201":
          description: successful operation without response body
        "400":
          description: if an invalid request body was send
        "500":
          description: if any internal error occurs while processing the request
  /task/{id}:
    get:
      summary: Get a task info object by id.
      operationId: getTaskInfo
      parameters:
      - name: id
        in: path
        description: the id of a task
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskInfoDto"
        "404":
          description: if the task could not be found
        "500":
          description: if any internal error occurs while processing the request
components:
  schemas:
    CrimeCaseDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        summary:
          type: string
        language:
          type: string
        imageUrl:
          type: string
      required:
      - description
      - id
      - language
      - summary
      - title
    ResultSetCrimeCase:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/CrimeCaseDto"
    TemplateContextDto:
      type: object
      properties:
        variables:
          type: array
          items:
            $ref: "#/components/schemas/TemplateVariableDto"
          uniqueItems: true
      required:
      - variables
    TemplateVariableDto:
      type: object
      properties:
        key:
          type: string
          minLength: 1
        value:
          type: string
          minLength: 1
      required:
      - key
      - value
    CrimeSceneDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
      required:
      - description
      - id
      - title
    EvidenceDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        location:
          type: string
        analysisResult:
          type: string
        evidenceType:
          type: string
          enum:
          - DIGITAL
          - FORENSIC
          - BALLISTIC
          - DOCUMENT
          - TRACE
          - OTHER
        documentContent:
          type: string
      required:
      - analysisResult
      - description
      - evidenceType
      - id
      - location
      - title
    ResultSetEvidence:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/EvidenceDto"
    MotiveDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
      required:
      - description
      - id
      - title
    ResultSetMotive:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/MotiveDto"
    AlibiDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
      required:
      - content
      - id
    PersonDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        roles:
          type: array
          items:
            type: string
            enum:
            - VICTIM
            - WITNESS
            - SUSPECT
            - DIGITAL_EXPERT
            - FORENSIC_EXPERT
            - BALLISTIC_EXPERT
            - DOCUMENT_EXPERT
            - TRACE_EXPERT
            - FORENSIC_PATHOLOGIST
            - CRIMINAL_ASSISTANT
            - PERPETRATOR
        age:
          type: integer
          format: int32
        profession:
          type: string
        gender:
          type: string
        personality:
          type: string
        maritalStatus:
          type: string
        financialSituation:
          type: string
        previousConvictions:
          type: array
          items:
            type: string
        relationshipToCase:
          type: string
        alibi:
          $ref: "#/components/schemas/AlibiDto"
        lifeStatus:
          type: string
          enum:
          - DEAD
          - ALIVE
      required:
      - age
      - financialSituation
      - gender
      - id
      - lifeStatus
      - maritalStatus
      - name
      - personality
      - previousConvictions
      - profession
      - relationshipToCase
      - roles
    ResultSetPerson:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PersonDto"
    ResultSetSolutionAttempt:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/SolutionAttemptDto"
    SolutionAttemptDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
          minLength: 1
        success:
          type: boolean
        createdAt:
          type: string
      required:
      - createdAt
      - id
      - userId
    CreateSolutionAttemptDto:
      type: object
      properties:
        solution:
          $ref: "#/components/schemas/SolutionDto"
        userId:
          type: string
          minLength: 1
      required:
      - solution
      - userId
    SolutionDto:
      type: object
      properties:
        evidenceIds:
          type: array
          items:
            type: integer
            format: int64
        motiveIds:
          type: array
          items:
            type: integer
            format: int64
        personIds:
          type: array
          items:
            type: integer
            format: int64
      required:
      - evidenceIds
      - motiveIds
      - personIds
    InterrogationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: string
        personId:
          type: integer
          format: int64
      required:
      - id
      - personId
      - userId
    ResultSetInterrogation:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/InterrogationDto"
    CreateInterrogationAnswerDto:
      type: object
      properties:
        question:
          type: string
        userId:
          type: string
        personId:
          type: integer
          format: int64
        reference:
          $ref: "#/components/schemas/CreateReferenceDto"
      required:
      - personId
      - question
      - userId
    CreateReferenceDto:
      type: object
      properties:
        referenceId:
          type: integer
          format: int64
        referenceType:
          type: string
          enum:
          - EVIDENCE_REPORT
      required:
      - referenceId
      - referenceType
    QuestionAndAnswerDto:
      type: object
      properties:
        question:
          type: string
        answer:
          type: string
        createdAt:
          type: string
      required:
      - answer
      - createdAt
      - question
    ResultSetQuestionAndAnswer:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/QuestionAndAnswerDto"
    CreatePromptTemplateDto:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        template:
          type: string
          minLength: 1
      required:
      - name
      - template
    PromptTemplateVersionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          type: string
      required:
      - createdAt
      - id
    ResultSetPromptTemplateVersion:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PromptTemplateVersionDto"
    PromptTemplateIdentifierDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 1
      required:
      - id
      - name
    ResultSetPromptTemplateIdentifier:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/PromptTemplateIdentifierDto"
    PromptTemplateDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          minLength: 1
        template:
          type: string
          minLength: 1
        createdAt:
          type: string
      required:
      - createdAt
      - id
      - name
      - template
    EvidenceReportDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        personId:
          type: integer
          format: int64
        analysis:
          type: string
        methods:
          type: string
        conclusion:
          type: string
      required:
      - analysis
      - conclusion
      - id
      - methods
      - personId
    ResultSetEvidenceReport:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/EvidenceReportDto"
    CreateEvidenceReportDto:
      type: object
      properties:
        evidenceId:
          type: integer
          format: int64
        personId:
          type: integer
          format: int64
      required:
      - evidenceId
      - personId
    AutopsyReportDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reportAuthorId:
          type: integer
          format: int64
        externalExamination:
          type: string
        internalExamination:
          type: string
        causeOfDeath:
          type: string
        conclusionsAndAssessment:
          type: string
        timeOfDeathFrom:
          type: string
        timeOfDeathTo:
          type: string
      required:
      - causeOfDeath
      - conclusionsAndAssessment
      - externalExamination
      - id
      - internalExamination
      - reportAuthorId
      - timeOfDeathFrom
      - timeOfDeathTo
    ResultSetAutopsyReport:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/AutopsyReportDto"
    CreateAutopsyReportDto:
      type: object
      properties:
        reportAuthorId:
          type: integer
          format: int64
        victimId:
          type: integer
          format: int64
      required:
      - reportAuthorId
      - victimId
    TaskInfoDto:
      type: object
      properties:
        id:
          type: string
          minLength: 1
        taskStatus:
          type: string
          enum:
          - PENDING
          - COMPLETED
        createdAt:
          type: string
        completedAt:
          type: string
      required:
      - createdAt
      - id
      - taskStatus
